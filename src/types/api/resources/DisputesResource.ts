/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
import { IBalanceAccountBase } from '../models';

export interface paths {
    '/v1/disputes/{disputePspReference}': {
        /** @description Add @Operation annotation to provide a description */
        get: operations['getDisputeDetail'];
    };
    '/v1/disputes/{disputePspReference}/accept': {
        /** @description Add @Operation annotation to provide a description */
        get: operations['acceptDispute'];
    };
    '/v1/disputes/{disputePspReference}/defend': {
        /** @description Add @Operation annotation to provide a description */
        get: operations['defendDispute'];
    };
    '/v1/disputes/{disputePspReference}/documents': {
        /** @description Add @Operation annotation to provide a description */
        get: operations['getApplicableDefenseDocuments'];
    };
    '/v1/disputes/{disputePspReference}/documents/download': {
        /** @description Add @Operation annotation to provide a description */
        get: operations["downloadDisputeFile"];
    };
}

export type webhooks = Record<string, never>;

export interface components {
    schemas: {
        ApplicableDefenseDocumentRequirementLevel: 'OPTIONAL' | 'ONE_OR_MORE' | 'REQUIRED';
        ApplicableDefenseDocument: {
            documentTypeCode: string;
            requirementLevel: components['schemas']['ApplicableDefenseDocumentRequirementLevel'];
        };
        Amount: {
            /** @description The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes#currency-codes). */
            currency: string;
            /**
             * Format: int64
             * @description The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes#minor-units).
             */
            value: number;
        };
        /** @enum {string} */
        Defensibility: 'not_defendable' | 'defendable' | 'defendable_externally';
        Defense: {
            /** Format: date-time */
            defendedOn?: string;
            reason?: string;
            suppliedDocuments?: string[];
        };
        Dispute: {
            amount: components['schemas']['Amount'];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            dueDate?: string;
            id: string;
            paymentMerchantReference?: string;
            paymentMethod?: components['schemas']['PaymentMethod'];
            reasonCode: string;
            reasonGroup: string;
            status: components['schemas']['DisputeStatus'];
        };
        DisputeDetailResponse: {
            allowedDefenseReasons?: string[];
            balanceAccount?: IBalanceAccountBase;
            amount: components['schemas']['Amount'];
            /** Format: date-time */
            createdAt: string;
            defensibility: components['schemas']['Defensibility'];
            /** Format: date-time */
            dueDate?: string;
            id: string;
            latestDefense?: components['schemas']['Defense'];
            paymentMerchantReference?: string;
            paymentMethod?: components['schemas']['PaymentMethod'];
            paymentPspReference: string;
            reasonCode: string;
            reasonGroup: string;
            status: components['schemas']['DisputeStatus'];
        };
        /** @enum {string} */
        DisputeStatus: 'action_needed' | 'won' | 'lost' | 'docs_submitted' | 'under_review' | 'expired';
        DisputesListResponseDTO: {
            _links?: components['schemas']['Links'];
            data: components['schemas']['Dispute'][];
        };
        PaymentMethod: {
            /** @description Payment method name, such as PayPal, Mastercard etc. */
            description?: string;
            /** @description Last four digits of the payment method used (e.g. a credit card, a debit card, an IBAN) */
            lastFourDigits?: string;
            /** @description Payment method type code of the transaction, e.g. 'klarna', 'visa', 'mc' */
            type: string;
        };
        Link: {
            /** @description Cursor for a different page */
            cursor: string;
        };
        Links: {
            /** @description Link to a different page */
            next: components['schemas']['Link'];
            /** @description Link to a different page */
            prev: components['schemas']['Link'];
        };
        DownloadDisputeFileResponseDTO: Uint8Array;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
    /** @description Add @Operation annotation to provide a description */
    getApplicableDefenseDocuments: {
        parameters: {
            query: {
                defenseReason: string;
            };
            path: {
                disputePspReference: string;
            };
        };
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                content: {
                    'application/json': components['schemas']['ApplicableDefenseDocument'][];
                };
            };
        };
    };
    /** @description Add @Operation annotation to provide a description */
    getDisputeDetail: {
        parameters: {
            path: {
                disputePspReference: string;
            };
        };
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                content: {
                    'application/json': components['schemas']['DisputeDetailResponse'];
                };
            };
        };
    };
    getDisputes: {
        parameters: {
            query: {
                statusGroup?: 'closed' | 'open';
                balanceAccountId?: string;
                createdSince?: string;
                createdUntil?: string;
                reasonCode?: string;
                limit?: number;
                cursor?: string;
            };
        };
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                content: {
                    'application/json': components['schemas']['DisputesListResponseDTO'];
                };
            };
        };
    };
    /** @description Add @Operation annotation to provide a description */
    acceptDispute: {
        parameters: {
            path: {
                disputePspReference: string;
            };
        };
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                content: {
                    'application/json': {};
                };
            };
        };
    };
    /** @description Add @Operation annotation to provide a description */
    defendDispute: {
        parameters: {
            path: {
                disputePspReference: string;
            };
        };
        requestBody: {
            content: {
                'multipart/form-data': FormData;
            };
        };
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                content: {
                    'application/json': {};
                };
            };
        };
    };
    /** @description Add @Operation annotation to provide a description */
    downloadDisputeFile: {
        parameters: {
            path: {
                disputePspReference: string;
            }
            query: {
                documentType: string;
            };
        };
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                content: {
                    "text/csv": components["schemas"]["DownloadDisputeFileResponseDTO"];
                };
            };
        };
    }
}
