/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/v1/disputes/{disputePspReference}/accept': {
        /** @description Add @Operation annotation to provide a description */
        post: operations['acceptDispute'];
    };
    '/v1/disputes/{disputePspReference}/documents/download': {
        /** @description Add @Operation annotation to provide a description */
        get: operations['downloadDefenseDocument'];
    };
    '/v1/disputes/{disputePspReference}/documents/required': {
        /** @description Add @Operation annotation to provide a description */
        get: operations['getApplicableDefenseDocuments'];
    };
    '/v1/disputes/{disputePspReference}': {
        /** @description Add @Operation annotation to provide a description */
        get: operations['getDisputeDetail'];
    };
    '/v1/disputes/{disputePspReference}/defend': {
        /** @description Add @Operation annotation to provide a description */
        get: operations['defendDispute'];
    };
    '/v1/disputes/{disputePspReference}/documents': {
        /** @description Add @Operation annotation to provide a description */
        get: operations['getApplicableDefenseDocuments'];
    };
}

export type webhooks = Record<string, never>;

export interface components {
    schemas: {
        ApplicableDefenseDocumentRequirementLevel: 'OPTIONAL' | 'ONE_OR_MORE' | 'REQUIRED';
        AcceptDisputeResponse: {
            disputePspReference: string;
            status: string;
        };
        BalanceAccount: {
            timeZone: string;
        };
        StreamingOutput: Record<string, never>;
        /** @description Standardized error response following RFC-7807 format */
        DefaultErrorResponseEntity: {
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail?: string;
            /** @description Unique business error code. */
            errorCode?: string;
            /** @description A URI that identifies the specific occurrence of the problem if applicable. */
            instance?: string;
            /** @description Array of fields with validation errors when applicable. */
            invalidFields?: components['schemas']['InvalidField'][];
            /** @description The unique reference for the request. */
            requestId?: string;
            /**
             * Format: int32
             * @description The HTTP status code.
             */
            status?: number;
            /** @description A short, human-readable summary of the problem type. */
            title?: string;
            /** @description A URI that identifies the validation error type. It points to human-readable documentation for the problem type. */
            type?: string;
        };
        InvalidField: {
            /** @description The field that has an invalid value. */
            name: string;
            /** @description The invalid value. */
            value: string;
            /** @description Description of the validation error. */
            message: string;
        };
        ApplicableDefenseDocument: {
            documentTypeCode: string;
            requirementLevel: components['schemas']['ApplicableDefenseDocumentRequirementLevel'];
        };
        Amount: {
            /** @description The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes#currency-codes). */
            currency: string;
            /**
             * Format: int64
             * @description The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes#minor-units).
             */
            value: number;
        };
        Defense: {
            /** Format: date-time */
            defendedOn: string;
            defendedThroughComponent: boolean;
            reason: string;
            suppliedDocuments?: string[];
        };
        /** @enum {string} */
        Defensibility: 'defendable' | 'defendable_externally' | 'not_defendable';
        Dispute: {
            allowedDefenseReasons: string[];
            amount: components['schemas']['Amount'];
            /** Format: date-time */
            createdAt: string;
            defensibility: components['schemas']['Defensibility'];
            /** Format: date-time */
            dueDate?: string;
            pspReference: string;
            reason: components['schemas']['DisputeReason'];
            status: components['schemas']['DisputeStatus'];
            type: components['schemas']['DisputeType'];
            paymentMethod?: components['schemas']['PaymentMethod'];
        };
        /** @enum {string} */
        DisputeCategory:
            | 'fraud'
            | 'consumer_dispute'
            | 'processing_error'
            | 'request_for_information'
            | 'authorisation_error'
            | 'adjustment'
            | 'other';
        DisputeDetailResponse: {
            defense?: components['schemas']['Defense'];
            dispute: components['schemas']['Dispute'];
            payment: components['schemas']['Payment'];
        };
        DisputeReason: {
            category: components['schemas']['DisputeCategory'];
            code: string;
            title: string;
        };
        /** @enum {string} */
        DisputeStatus: 'action_needed' | 'won' | 'lost' | 'accepted' | 'pending' | 'expired';
        /** @enum {string} */
        DisputeType: 'chargeback' | 'request_for_information' | 'notification_of_fraud';
        Payment: {
            balanceAccount?: components['schemas']['BalanceAccount'];
            balanceAccountDescription: string;
            isRefunded: boolean;
            merchantReference?: string;
            paymentMethod?: components['schemas']['PaymentMethod'];
            pspReference: string;
        };
        DisputesListResponseDTO: {
            _links?: components['schemas']['Links'];
            data: components['schemas']['Dispute'][];
        };
        PaymentMethod: {
            /** @description Payment method name, such as PayPal, Mastercard etc. */
            description?: string;
            /** @description Last four digits of the payment method used (e.g. a credit card, a debit card, an IBAN) */
            lastFourDigits?: string;
            /** @description Payment method type code of the transaction, e.g. 'klarna', 'visa', 'mc' */
            type: string;
        };
        Link: {
            /** @description Cursor for a different page */
            cursor: string;
        };
        Links: {
            /** @description Link to a different page */
            next: components['schemas']['Link'];
            /** @description Link to a different page */
            prev: components['schemas']['Link'];
        };
        DownloadDisputeFileResponseDTO: Uint8Array;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
    /** @description Add @Operation annotation to provide a description */
    acceptDispute: {
        parameters: {
            path: {
                disputePspReference: string;
            };
        };
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                content: {
                    'application/json': components['schemas']['AcceptDisputeResponse'];
                };
            };
        };
    };
    /** @description Add @Operation annotation to provide a description */
    downloadDefenseDocument: {
        parameters: {
            query: {
                documentType: string;
            };
            path: {
                disputePspReference: string;
            };
        };
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                content: {
                    '*/*': components['schemas']['StreamingOutput'];
                };
            };
            /** @description Client Error */
            '4XX': {
                content: {
                    'application/json': components['schemas']['DefaultErrorResponseEntity'];
                };
            };
            /** @description Server Error */
            '5XX': {
                content: {
                    'application/json': components['schemas']['DefaultErrorResponseEntity'];
                };
            };
        };
    };
    /** @description Add @Operation annotation to provide a description */
    getApplicableDefenseDocuments: {
        parameters: {
            query: {
                defenseReason: string;
            };
            path: {
                disputePspReference: string;
            };
        };
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                content: {
                    'application/json': components['schemas']['ApplicableDefenseDocument'][];
                };
            };
        };
    };
    /** @description Add @Operation annotation to provide a description */
    getDisputeDetail: {
        parameters: {
            path: {
                disputePspReference: string;
            };
        };
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                content: {
                    'application/json': components['schemas']['DisputeDetailResponse'];
                };
            };
        };
    };
    getDisputes: {
        parameters: {
            query: {
                statusGroup?: 'NEW_CHARGEBACKS' | 'ALL_DISPUTES' | 'FRAUD_ALERTS';
                balanceAccountId?: string;
                createdSince?: string;
                createdUntil?: string;
                reasonCode?: string;
                limit?: number;
                cursor?: string;
            };
        };
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                content: {
                    'application/json': components['schemas']['DisputesListResponseDTO'];
                };
            };
        };
    };
    defendDispute: {
        parameters: {
            path: {
                disputePspReference: string;
            };
        };
        requestBody: {
            content: {
                'multipart/form-data': FormData;
            };
        };
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                content: {
                    'application/json': {};
                };
            };
        };
    };
    /** @description Add @Operation annotation to provide a description */
    downloadDisputeFile: {
        parameters: {
            path: {
                disputePspReference: string;
            };
            query: {
                documentType: string;
            };
        };
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                content: {
                    'text/csv': components['schemas']['DownloadDisputeFileResponseDTO'];
                };
            };
        };
    };
}
