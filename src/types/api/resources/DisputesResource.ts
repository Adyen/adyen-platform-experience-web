/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/v1/disputes/{disputePspReference}/accept': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add @Operation annotation to provide a description */
        post: operations['acceptDispute'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/disputes/{disputePspReference}/defend': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add @Operation annotation to provide a description */
        post: operations['defendDispute'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/disputes/{disputePspReference}/documents/download': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Add @Operation annotation to provide a description */
        get: operations['downloadDefenseDocument'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/disputes/{disputePspReference}/documents/required': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Add @Operation annotation to provide a description */
        get: operations['getApplicableDefenseDocuments'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/disputes/{disputePspReference}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Add @Operation annotation to provide a description */
        get: operations['getDisputeDetail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/disputes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Add @Operation annotation to provide a description */
        get: operations['getDisputeList'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        HandleDisputeResponse: {
            disputePspReference: string;
            status: string;
        };
        BodyPart: {
            contentDisposition?: components['schemas']['ContentDisposition'];
            entity?: Record<string, never>;
            headers?: {
                empty?: boolean;
            } & {
                [key: string]: string[];
            };
            mediaType?: components['schemas']['MediaType'];
            messageBodyWorkers?: components['schemas']['MessageBodyWorkers'];
            parameterizedHeaders?: {
                empty?: boolean;
            } & {
                [key: string]: components['schemas']['ParameterizedHeader'][];
            };
            parent?: components['schemas']['MultiPart'];
            providers?: components['schemas']['Providers'];
        };
        ContentDisposition: {
            /** Format: date-time */
            creationDate?: string;
            fileName?: string;
            /** Format: date-time */
            modificationDate?: string;
            parameters?: {
                [key: string]: string;
            };
            /** Format: date-time */
            readDate?: string;
            /** Format: int64 */
            size?: number;
            type?: string;
        };
        FormDataBodyPart: {
            contentDisposition?: components['schemas']['ContentDisposition'];
            entity?: Record<string, never>;
            formDataContentDisposition?: components['schemas']['FormDataContentDisposition'];
            headers?: {
                empty?: boolean;
            } & {
                [key: string]: string[];
            };
            mediaType?: components['schemas']['MediaType'];
            messageBodyWorkers?: components['schemas']['MessageBodyWorkers'];
            name?: string;
            parameterizedHeaders?: {
                empty?: boolean;
            } & {
                [key: string]: components['schemas']['ParameterizedHeader'][];
            };
            parent?: components['schemas']['MultiPart'];
            providers?: components['schemas']['Providers'];
            simple?: boolean;
            value?: string;
        };
        FormDataContentDisposition: {
            /** Format: date-time */
            creationDate?: string;
            fileName?: string;
            /** Format: date-time */
            modificationDate?: string;
            name?: string;
            parameters?: {
                [key: string]: string;
            };
            /** Format: date-time */
            readDate?: string;
            /** Format: int64 */
            size?: number;
            type?: string;
        };
        FormDataMultiPart: {
            bodyParts?: components['schemas']['BodyPart'][];
            contentDisposition?: components['schemas']['ContentDisposition'];
            entity?: Record<string, never>;
            fields?: {
                [key: string]: components['schemas']['FormDataBodyPart'][];
            };
            headers?: {
                empty?: boolean;
            } & {
                [key: string]: string[];
            };
            mediaType?: components['schemas']['MediaType'];
            messageBodyWorkers?: components['schemas']['MessageBodyWorkers'];
            parameterizedHeaders?: {
                empty?: boolean;
            } & {
                [key: string]: components['schemas']['ParameterizedHeader'][];
            };
            parent?: components['schemas']['MultiPart'];
            providers?: components['schemas']['Providers'];
        };
        MediaType: {
            parameters?: {
                [key: string]: string;
            };
            subtype?: string;
            type?: string;
            wildcardSubtype?: boolean;
            wildcardType?: boolean;
        };
        MessageBodyWorkers: Record<string, never>;
        MultiPart: {
            contentDisposition?: components['schemas']['ContentDisposition'];
            entity?: Record<string, never>;
            headers?: {
                empty?: boolean;
            } & {
                [key: string]: string[];
            };
            mediaType?: components['schemas']['MediaType'];
            messageBodyWorkers?: components['schemas']['MessageBodyWorkers'];
            parameterizedHeaders?: {
                empty?: boolean;
            } & {
                [key: string]: components['schemas']['ParameterizedHeader'][];
            };
            parent?: components['schemas']['MultiPart'];
            providers?: components['schemas']['Providers'];
        };
        ParameterizedHeader: {
            parameters?: {
                [key: string]: string;
            };
            value?: string;
        };
        Providers: Record<string, never>;
        StreamingOutput: Record<string, never>;
        /** @description Standardized error response following RFC-7807 format */
        DefaultErrorResponseEntity: {
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail?: string;
            /** @description Unique business error code. */
            errorCode?: string;
            /** @description A URI that identifies the specific occurrence of the problem if applicable. */
            instance?: string;
            /** @description Array of fields with validation errors when applicable. */
            invalidFields?: components['schemas']['InvalidField'][];
            /** @description The unique reference for the request. */
            requestId?: string;
            /**
             * Format: int32
             * @description The HTTP status code.
             */
            status?: number;
            /** @description A short, human-readable summary of the problem type. */
            title?: string;
            /** @description A URI that identifies the validation error type. It points to human-readable documentation for the problem type. */
            type?: string;
        };
        InvalidField: {
            /** @description The field that has an invalid value. */
            name: string;
            /** @description The invalid value. */
            value: string;
            /** @description Description of the validation error. */
            message: string;
        };
        ApplicableDefenseDocument: {
            documentTypeCode: string;
            requirementLevel?: components['schemas']['DocumentRequirementLevel'];
        };
        ApplicableDefenseDocumentsResponse: {
            data: components['schemas']['ApplicableDefenseDocument'][];
        };
        /** @enum {string} */
        DocumentRequirementLevel: 'ONE_OR_MORE' | 'REQUIRED' | 'OPTIONAL';
        Amount: {
            /** @description The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes#currency-codes). */
            currency: string;
            /**
             * Format: int64
             * @description The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes#minor-units).
             */
            value: number;
        };
        Defense: {
            autodefended: boolean;
            /** Format: date-time */
            defendedOn: string;
            defendedThroughComponent: boolean;
            reason?: string;
            suppliedDocuments?: string[];
        };
        /** @enum {string} */
        Defensibility: 'DEFENDABLE' | 'ACCEPTABLE' | 'DEFENDABLE_EXTERNALLY' | 'NOT_ACTIONABLE';
        Dispute: {
            /** Format: date-time */
            acceptedDate?: string;
            allowedDefenseReasons: string[];
            amount: components['schemas']['Amount'];
            /** Format: date-time */
            createdAt: string;
            defensibility: components['schemas']['Defensibility'];
            /** Format: date-time */
            dueDate?: string;
            issuerExtraData?: components['schemas']['IssuerExtraData'];
            pspReference: string;
            reason: components['schemas']['DisputeReason'];
            status: components['schemas']['DisputeStatus'];
            type: components['schemas']['DisputeType'];
        };
        DisputeBalanceAccount: {
            /** @description Balance account description, or, if description is empty – balance account code */
            description: string;
            timeZone: string;
        };
        /** @enum {string} */
        DisputeCategory:
            | 'FRAUD'
            | 'CONSUMER_DISPUTE'
            | 'PROCESSING_ERROR'
            | 'REQUEST_FOR_INFORMATION'
            | 'AUTHORISATION_ERROR'
            | 'ADJUSTMENT'
            | 'OTHER';
        DisputeDetailResponse: {
            defense?: components['schemas']['Defense'];
            dispute: components['schemas']['Dispute'];
            payment: components['schemas']['Payment'];
        };
        DisputeReason: {
            category: components['schemas']['DisputeCategory'];
            code: string;
            title: string;
        };
        /** @enum {string} */
        DisputeStatus: 'UNDEFENDED' | 'UNRESPONDED' | 'RESPONDED' | 'WON' | 'LOST' | 'ACCEPTED' | 'PENDING' | 'EXPIRED';
        /** @enum {string} */
        DisputeType: 'CHARGEBACK' | 'REQUEST_FOR_INFORMATION' | 'NOTIFICATION_OF_FRAUD';
        IssuerExtraData: {
            /** @description Issuer comments for the chargeback phase */
            chargeback?: {
                [key: string]: string;
            };
            /** @description Extra data regarding the dispute */
            extraData?: {
                [key: string]: string;
            };
            /** @description Issuer comments for the pre-arbitration phase */
            preArbitration?: {
                [key: string]: string;
            };
        };
        Payment: {
            balanceAccount: components['schemas']['DisputeBalanceAccount'];
            isRefunded: boolean;
            merchantReference?: string;
            paymentMethod?: components['schemas']['PaymentMethod'];
            pspReference: string;
        };
        PaymentMethod: {
            /** @description Payment method name, such as PayPal, Mastercard etc. */
            description?: string;
            /** @description Last four digits of the payment method used (e.g. a credit card, a debit card, an IBAN) */
            lastFourDigits?: string;
            /** @description Payment method type code of the transaction, e.g. 'klarna', 'visa', 'mc' */
            type: string;
        };
        DisputeListItem: {
            amount: components['schemas']['Amount'];
            /** Format: date-time */
            createdAt: string;
            disputePspReference: string;
            /** Format: date-time */
            dueDate?: string;
            paymentMethod: components['schemas']['PaymentMethod'];
            reason: components['schemas']['DisputeReason'];
            status: components['schemas']['DisputeStatus'];
        };
        DisputeListResponse: {
            _links?: components['schemas']['Links'];
            data?: components['schemas']['DisputeListItem'][];
        };
        Link: {
            /** @description Cursor for a different page */
            cursor: string;
        };
        Links: {
            /** @description Link to a different page */
            next: components['schemas']['Link'];
            /** @description Link to a different page */
            prev: components['schemas']['Link'];
        };
        /** @enum {string} */
        StatusGroup: 'CHARGEBACKS' | 'FRAUD_ALERTS' | 'ONGOING_AND_CLOSED';
        /** @enum {string} */
        SchemeCodes: 'visa' | 'mc' | 'sepadirectdebit' | 'pulse' | 'discover' | 'ach' | 'amex' | 'elo' | 'jcb' | 'others';
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    acceptDispute: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                disputePspReference: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HandleDisputeResponse'];
                };
            };
        };
    };
    defendDispute: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                disputePspReference: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'multipart/form-data': components['schemas']['FormDataMultiPart'];
            };
        };
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HandleDisputeResponse'];
                };
            };
        };
    };
    downloadDefenseDocument: {
        parameters: {
            query: {
                documentType: string;
            };
            header?: never;
            path: {
                disputePspReference: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['StreamingOutput'];
                };
            };
            /** @description Client Error */
            '4XX': {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DefaultErrorResponseEntity'];
                };
            };
            /** @description Server Error */
            '5XX': {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DefaultErrorResponseEntity'];
                };
            };
        };
    };
    getApplicableDefenseDocuments: {
        parameters: {
            query: {
                defenseReason: string;
            };
            header?: never;
            path: {
                disputePspReference: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ApplicableDefenseDocumentsResponse'];
                };
            };
        };
    };
    getDisputeDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                disputePspReference: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DisputeDetailResponse'];
                };
            };
        };
    };
    getDisputeList: {
        parameters: {
            query: {
                statusGroup: components['schemas']['StatusGroup'];
                balanceAccountId?: string;
                reasonCategories?: components['schemas']['DisputeCategory'][];
                schemeCodes?: components['schemas']['SchemeCodes'][];
                createdSince?: string;
                createdUntil?: string;
                limit?: number;
                cursor?: string;
            };
            header?: {
                'SDK-Version'?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['DisputeListResponse'];
                };
            };
        };
    };
}
