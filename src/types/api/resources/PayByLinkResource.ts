/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/v1/paybylink/paymentLinks': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Add @Operation annotation to provide a description */
        get: operations['getPaymentLinks'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/paybylink/filters': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Add @Operation annotation to provide a description */
        get: operations['payByLinkFilters'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/paybylink/paymentLinks/configuration': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Pay by Link configuration
         * @description Dynamic fields from Link creation form
         */
        get: operations['getPayByLinkConfiguration'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/paybylink/installments': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Installments
         * @description Installments configuration. Depends on selected country
         */
        get: operations['getPayByLinkInstallments'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/paybylink/themes/{storeId}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                storeId: string;
            };
            cookie?: never;
        };
        /**
         * Theme: Get store theme
         * @description Returns the theme for a given storeId
         */
        get: operations['getThemeByStore'];
        put?: never;
        /**
         * Theme: Create/Update store theme
         * @description Update the theme for a given storeId. Note that request body is multipart/form-data
         */
        post: operations['createTheme'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Amount: {
            /** @description The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes#currency-codes). */
            currency: string;
            /**
             * Format: int64
             * @description The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes#minor-units).
             */
            value: number;
        };
        Link: {
            /** @description Cursor for a different page */
            cursor: string;
        };
        Links: {
            /** @description Link to a different page */
            next?: components['schemas']['Link'];
            /** @description Link to a different page */
            prev?: components['schemas']['Link'];
        };
        /** @enum {string} */
        PaymentLinkStatus: 'active' | 'paymentPending' | 'paid' | 'expired' | 'completed';
        /** @enum {string} */
        PaymentLinkType: 'open' | 'singleUse';
        PaymentLinksItem: {
            /** @description Amount */
            amount: components['schemas']['Amount'];
            /**
             * Format: date-time
             * @description Creation Date
             */
            creationDate: string;
            /**
             * Format: date-time
             * @description Expiration Date
             */
            expirationDate: string;
            /** @description Payment Link Type */
            linkType: components['schemas']['PaymentLinkType'];
            /** @description Merchant Reference */
            merchantReference: string;
            /** @description Payment Link ID */
            paymentLinkId: string;
            /** @description Shopper Email */
            shopperEmail?: string;
            /** @description Status */
            status: components['schemas']['PaymentLinkStatus'];
        };
        PaymentLinksResponse: {
            /** @description Links */
            _links: components['schemas']['Links'];
            /** @description Payment links made within the filters provided */
            data: components['schemas']['PaymentLinksItem'][];
        };
        FiltersResponseDTO: {
            linkTypes: components['schemas']['PayByLinkLinkType'][];
            statuses: components['schemas']['PayByLinkStatus'][];
        };
        /** @enum {string} */
        PayByLinkLinkType: 'singleUse' | 'open';
        /** @enum {string} */
        PayByLinkStatus: 'completed' | 'expired' | 'active' | 'paymentPending';
        FillMode: boolean;
        Country: {
            countryCode?: string;
            countryName?: string;
        };
        /** Currency */
        Currency: {
            id?: string;
        };
        LinkValidity: {
            durationUnit?: string;
            quantity?: number;
            type?: string;
        };
        Theme: {
            brandName?: string;
            logoUrl?: string;
        };
        PaymentLinkConfiguration: {
            amountValue: {
                required: boolean;
            };
            billingAddress?: {
                required: components['schemas']['FillMode'];
            };
            countryCode?: {
                fillMode: components['schemas']['FillMode'];
                options?: components['schemas']['Country'][];
            };
            currency: {
                required: components['schemas']['FillMode'];
                options?: components['schemas']['Currency'][];
            };
            deliveryDate?: {
                required: components['schemas']['FillMode'];
            };
            description?: {
                required: components['schemas']['FillMode'];
            };
            emailAddress?: {
                required: components['schemas']['FillMode'];
            };
            emailSender?: {
                required: components['schemas']['FillMode'];
            };
            fullName?: {
                required: components['schemas']['FillMode'];
            };
            linkType?: {
                fillMode: components['schemas']['FillMode'];
                options: string[];
            };
            linkValidity?: {
                fillMode: components['schemas']['FillMode'];
                options: components['schemas']['LinkValidity'][];
            };
            merchantReference: {
                required: components['schemas']['FillMode'];
            };
            phoneNumber?: {
                required: components['schemas']['FillMode'];
            };
            shippingAddress?: {
                required: components['schemas']['FillMode'];
            };
            shopperLocale?: {
                required: components['schemas']['FillMode'];
                options?: string[];
            };
            shopperReference?: {
                required: components['schemas']['FillMode'];
            };
            store: {
                /** @description will be always true, but let's have it for future compatibility */
                fillMode: components['schemas']['FillMode'];
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getPaymentLinks: {
        parameters: {
            query?: {
                cursor?: string;
                limit?: number;
                createdSince?: string;
                createdUntil?: string;
                status?: string;
                currency?: string;
                amount?: number;
                linkType?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PaymentLinksResponse'];
                };
            };
        };
    };
    payByLinkFilters: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['FiltersResponseDTO'];
                };
            };
        };
    };
    getPayByLinkConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['PaymentLinkConfiguration'];
            };
        };
        responses: never;
    };
    getPayByLinkInstallments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description key-value map, where key is one of country codes, and value is array of installments */
                        data?: {
                            installments?: number[];
                            countryCode?: string;
                        }[];
                    };
                };
            };
        };
    };
    getThemeByStore: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                storeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Optional, could be that no theme already exists */
                        data?: components['schemas']['Theme'];
                    };
                    'application/xml': Record<string, never>;
                    'multipart/form-data': Record<string, never>;
                };
            };
        };
    };
    createTheme: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                storeId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'multipart/form-data': {
                    brandName?: string;
                    /** @description Note: file upload (not string) */
                    logo?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
