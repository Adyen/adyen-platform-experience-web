/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/v1/transactions/{transactionId}': {
        /**
         * Get transaction details
         * @description Given a transaction ID, it retrieves its details
         */
        get: operations['getTransaction'];
    };
    '/v1/transactions/{transactionId}/refund': {
        /**
         * Refund a transaction
         * @description Given a transaction ID and refund information, it initiates a refund
         */
        post: operations['refundTransaction'];
    };
    '/v1/transactions/totals': {
        /**
         * Get transaction totals
         * @description Given filters, provides total of incomings and expenses for all transactions matching the criteria
         */
        get: operations['getTransactionTotals'];
    };
    '/v1/transactions': {
        /**
         * Get transactions
         * @description Given filters, provides list of transactions for a balance account
         */
        get: operations['getTransactions'];
    };
}

export type webhooks = Record<string, never>;

export interface components {
    schemas: {
        /** @description Amount */
        Amount: {
            /** @description The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes). */
            currency: string;
            /**
             * Format: int64
             * @description The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
             */
            value: number;
        };
        /** @description Information about the bank account */
        BankAccount: {
            /** @description Last four digits of the account number or IBAN. */
            accountNumberLastFourDigits: string;
        };
        /**
         * @description Category
         * @enum {string}
         */
        Category: 'ATM' | 'Capital' | 'Correction' | 'Fee' | 'Payment' | 'Refund' | 'Chargeback' | 'Transfer' | 'Other';
        /** @description Payment method or payment instrument */
        PaymentMethod: {
            /** @description Last four digits of the card */
            lastFourDigits?: string;
            /** @description Payment method type code of the transaction f.e. klarna, visa, mc */
            type: string;
        };
        /** @description Transactions made within the filters provided for given balanceAccountId */
        SingleTransaction: {
            amount: components['schemas']['Amount'];
            /** @description BalanceAccount ID */
            balanceAccountId: string;
            bankAccount?: components['schemas']['BankAccount'];
            category: components['schemas']['Category'];
            /**
             * Format: date-time
             * @description Date created
             */
            createdAt: string;
            /** @description ID */
            id: string;
            paymentMethod?: components['schemas']['PaymentMethod'];
            status: components['schemas']['Status'];
        };
        /** @enum {string} */
        Status: 'Pending' | 'Booked' | 'Reversed';
        /** @description Collection of transaction totals per currency */
        TransactionTotal: {
            /** @description ISO currency code */
            currency: string;
            /**
             * Format: int64
             * @description Sum of expenses of transactions (negative transaction amount values)
             */
            expenses: number;
            /**
             * Format: int64
             * @description Sum of incomings of transactions (positive transaction amount values)
             */
            incomings: number;
        };
        TransactionTotalsResponse: {
            /** @description Collection of transaction totals per currency */
            data: components['schemas']['TransactionTotal'][];
        };
        /** @description Link to a different page */
        Link: {
            /** @description Cursor for a different page */
            cursor: string;
        };
        /** @description Links */
        Links: {
            next: components['schemas']['Link'];
            prev: components['schemas']['Link'];
        };
        TransactionsResponse: {
            _links: components['schemas']['Links'];
            /** @description Transactions made within the filters provided for given balanceAccountId */
            data: components['schemas']['SingleTransaction'][];
        };
        /** @enum {string} */
        SortDirection: 'asc' | 'desc';
        /** @enum {string} */
        RefundMode: 'fully_refundable_only' | 'non_refundable' | 'partially_refundable_any_amount' | 'partially_refundable_with_line_items_required';
        /** @enum {string} */
        RefundStatus: 'completed' | 'failed' | 'in_progress';
        TransactionLineItem: {
            amountIncludingTax: components['schemas']['Amount'];
            availableQuantity: number;
            description: string;
            id: string;
            originalQuantity: number;
            refundStatuses: components['schemas']['TransactionLineItemRefundStatus'][];
            sku?: string;
        };
        TransactionLineItemRefundStatus: {
            quantity: number;
            status: components['schemas']['RefundStatus'];
        };
        TransactionRefundStatus: {
            amount: components['schemas']['Amount'];
            status: components['schemas']['RefundStatus'];
        };
        TransactionRefundDetails: {
            refundStatuses: components['schemas']['TransactionRefundStatus'][];
            refundMode: components['schemas']['RefundMode'];
            refundLocked: boolean;
            refundableAmount: components['schemas']['Amount'];
        };
        TransactionResponse: components['schemas']['SingleTransaction'] & {
            originalAmount: components['schemas']['Amount'];
            deductedAmount: components['schemas']['Amount'];
            lineItems: components['schemas']['TransactionLineItem'][];
            refundDetails: components['schemas']['TransactionRefundDetails'];
        };
        TransactionRefundRequestLineItem: {
            item: components['schemas']['TransactionLineItem'];
            quantity: number;
        };
        TransactionRefundRequest: {
            amount: components['schemas']['Amount'];
            lineItems?: components['schemas']['TransactionRefundRequestLineItem'][];
            merchantRefundReason?: string;
        };
        TransactionRefundResponse: {
            status: 'received';
            transactionId: components['schemas']['SingleTransaction']['id'];
            amount: components['schemas']['Amount'];
            merchantRefundReason?: string;
            lineItems?: components['schemas']['TransactionLineItem'][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
    /**
     * Get transaction details
     * @description Given a transaction ID, it retrieves its details
     */
    getTransaction: {
        parameters: {
            path: {
                transactionId: string;
            };
        };
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                content: {
                    'application/json': components['schemas']['TransactionResponse'];
                };
            };
        };
    };
    /**
     * Refund transaction
     * @description Given a transaction ID and refund information, it initiates a refund
     */
    refundTransaction: {
        parameters: {
            path: {
                transactionId: string;
            };
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['TransactionRefundRequest'];
            },
        };
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                content: {
                    'application/json': components['schemas']['TransactionRefundResponse'];
                };
            };
        };
    };
    /**
     * Get transaction totals
     * @description Given filters, provides total of incomings and expenses for all transactions matching the criteria
     */
    getTransactionTotals: {
        parameters: {
            query: {
                balanceAccountId: string;
                createdSince?: string;
                createdUntil?: string;
                categories?: string[];
                statuses?: components['schemas']['Status'][];
                currencies?: string[];
                minAmount?: number;
                maxAmount?: number;
            };
        };
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                content: {
                    'application/json': components['schemas']['TransactionTotalsResponse'];
                };
            };
        };
    };
    /**
     * Get transactions
     * @description Given filters, provides list of transactions for a balance account
     */
    getTransactions: {
        parameters: {
            query: {
                balanceAccountId: string;
                createdSince?: string;
                createdUntil?: string;
                categories?: string[];
                statuses?: components['schemas']['Status'][];
                currencies?: string[];
                minAmount?: number;
                maxAmount?: number;
                cursor?: string;
                sortDirection?: components['schemas']['SortDirection'];
                limit?: number;
            };
        };
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                content: {
                    'application/json': components['schemas']['TransactionsResponse'];
                };
            };
        };
    };
}
