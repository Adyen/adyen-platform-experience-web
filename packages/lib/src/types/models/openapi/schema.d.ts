/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/grants': {
        /**
         * Get a capital account
         * @description Returns a list of grants with status and outstanding balances.
         */
        get: operations['get-grants'];
        /**
         * Request a grant payout
         * @description Requests the payout of the selected grant offer.
         */
        post: operations['post-grants'];
    };
    [path: `/grants/${string}`]: {
        /**
         * Get grant reference details
         * @description Returns the details of a capital account specified in the path.
         */
        get: operations['get-grants-id'];
    };
    '/transactions': {
        /**
         * Get all transactions
         * @description >Versions 1 and 2 of the Transfers API are deprecated. If you are just starting your implementation, use the latest version.
         *
         * Returns all the transactions related to a balance account, account holder, or balance platform.
         *
         * When making this request, you must include at least one of the following:
         * - `balanceAccountId`
         * - `accountHolderId`
         * - `balancePlatform`.
         *
         * This endpoint supports cursor-based pagination. The response returns the first page of results, and returns links to the next and previous pages when applicable. You can use the links to page through the results.
         */
        get: operations['get-transactions'];
    };
    [path: `/transactions/${string}`]: {
        /**
         * Get a transaction
         * @description >Versions 1 and 2 of the Transfers API are deprecated. If you are just starting your implementation, use the latest version.
         *
         * Returns a transaction.
         */
        get: operations['get-transactions-id'];
    };
    '/transfers': {
        /**
         * Transfer funds
         * @description >Versions 1 and 2 of the Transfers API are deprecated. If you are just starting your implementation, use the latest version.
         *
         * Starts a request to transfer funds to [balance accounts](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts), [transfer instruments](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments), or third-party bank accounts. Adyen sends the outcome of the transfer request through webhooks.
         *
         * To use this endpoint, you need an additional role for your API credential and transfers must be enabled for the source balance account. Your Adyen contact will set these up for you.
         */
        post: operations['post-transfers'];
    };
    [path: `/transfers/${string}/returns`]: {
        /**
         * Return a transfer
         * @description Returns previously transferred funds without creating a new `transferId`.
         */
        post: operations['post-transfers-transferId-returns'];
    };
}

export type webhooks = Record<string, never>;

export interface components {
    schemas: {
        AULocalAccountIdentification: {
            /** @description The bank account number, without separators or whitespace. */
            accountNumber: string;
            /** @description The 6-digit [Bank State Branch (BSB) code](https://en.wikipedia.org/wiki/Bank_state_branch), without separators or whitespace. */
            bsbCode: string;
            /**
             * @description **auLocal**
             * @default auLocal
             * @enum {string}
             */
            type: 'auLocal';
        };
        AdditionalBankIdentification: {
            /** @description The value of the additional bank identification. */
            code?: string;
            /**
             * @description The type of additional bank identification, depending on the country.
             *
             * Possible values:
             *
             *  * **gbSortCode**: The 6-digit [UK sort code](https://en.wikipedia.org/wiki/Sort_code), without separators or spaces
             *  * **usRoutingNumber**: The 9-digit [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or spaces.
             * @enum {string}
             */
            type?: 'gbSortCode' | 'usRoutingNumber';
        };
        Address: {
            /** @description The name of the city. */
            city?: string;
            /** @description The two-character ISO 3166-1 alpha-2 country code. For example, **US**, **NL**, or **GB**. */
            country: string;
            /** @description First line of the street address. */
            line1?: string;
            /** @description Second line of the street address. */
            line2?: string;
            /**
             * @description The postal code.
             * Maximum length:
             * * 5 digits for an address in the US.
             * * 10 characters for an address in all other countries.
             */
            postalCode?: string;
            /**
             * @description The two-letter ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.
             * > Required for the US and Canada.
             */
            stateOrProvince?: string;
        };
        Amount: {
            /** @description The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes). */
            currency: string;
            /**
             * Format: int64
             * @description The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
             */
            value: number;
        };
        BRLocalAccountIdentification: {
            /** @description The bank account number, without separators or whitespace. */
            accountNumber: string;
            /** @description The 3-digit bank code, with leading zeros. */
            bankCode: string;
            /** @description The bank account branch number, without separators or whitespace. */
            branchNumber: string;
            /**
             * @description **brLocal**
             * @default brLocal
             * @enum {string}
             */
            type: 'brLocal';
        };
        BankAccountV3: {
            /** @description Information about the owner of the bank account. */
            accountHolder: components['schemas']['PartyIdentification'];
            /** @description Contains the bank account details. The fields required in this object depend on the country of the bank account and the currency of the transfer. */
            accountIdentification:
                | components['schemas']['AULocalAccountIdentification']
                | components['schemas']['BRLocalAccountIdentification']
                | components['schemas']['CALocalAccountIdentification']
                | components['schemas']['CZLocalAccountIdentification']
                | components['schemas']['DKLocalAccountIdentification']
                | components['schemas']['HKLocalAccountIdentification']
                | components['schemas']['HULocalAccountIdentification']
                | components['schemas']['IbanAccountIdentification']
                | components['schemas']['NOLocalAccountIdentification']
                | components['schemas']['NZLocalAccountIdentification']
                | components['schemas']['NumberAndBicAccountIdentification']
                | components['schemas']['PLLocalAccountIdentification']
                | components['schemas']['SELocalAccountIdentification']
                | components['schemas']['SGLocalAccountIdentification']
                | components['schemas']['UKLocalAccountIdentification']
                | components['schemas']['USLocalAccountIdentification'];
        };
        CALocalAccountIdentification: {
            /** @description The 5- to 12-digit bank account number, without separators or whitespace. */
            accountNumber: string;
            /**
             * @description The bank account type.
             *
             * Possible values: **checking** or **savings**. Defaults to **checking**.
             * @default checking
             * @enum {string}
             */
            accountType?: 'checking' | 'savings';
            /** @description The 3-digit institution number, without separators or whitespace. */
            institutionNumber: string;
            /** @description The 5-digit transit number, without separators or whitespace. */
            transitNumber: string;
            /**
             * @description **caLocal**
             * @default caLocal
             * @enum {string}
             */
            type: 'caLocal';
        };
        CZLocalAccountIdentification: {
            /**
             * @description The 2- to 16-digit bank account number (Číslo účtu) in the following format:
             *
             * - The optional prefix (předčíslí).
             *
             * - The required second part (základní část) which must be at least two non-zero digits.
             *
             * Examples:
             *
             * - **19-123457** (with prefix)
             *
             * - **123457** (without prefix)
             *
             * - **000019-0000123457** (with prefix, normalized)
             *
             * - **000000-0000123457** (without prefix, normalized)
             */
            accountNumber: string;
            /** @description The 4-digit bank code (Kód banky), without separators or whitespace. */
            bankCode: string;
            /**
             * @description **czLocal**
             * @default czLocal
             * @enum {string}
             */
            type: 'czLocal';
        };
        CapitalBalance: {
            /** @description The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes). */
            currency: string;
            /**
             * Format: int64
             * @description Fee amount.
             */
            fee: number;
            /**
             * Format: int64
             * @description Principal amount.
             */
            principal: number;
            /**
             * Format: int64
             * @description Total amount. A sum of principal amount and fee amount.
             */
            total: number;
        };
        CapitalGrant: {
            /** @description An object containing the amount of the grant, in [minor units](https://docs.adyen.com/development-resources/currency-codes). */
            amount?: components['schemas']['Amount'];
            /** @description An object containing the details of the existing grant. */
            balances: components['schemas']['CapitalBalance'];
            /** @description An object containing the details of the receiving party of the grant. Setting either an `accountHolderId`, `balanceAccountId`, or both is required. */
            counterparty?: components['schemas']['Counterparty'];
            /** @description An object containing the fee currency and value, in [minor units](https://docs.adyen.com/development-resources/currency-codes). */
            fee?: components['schemas']['Fee'];
            /** @description The identifier of the grant account used for the grant. */
            grantAccountId: string;
            /** @description The identifier of the grant offer that has been selected and from which the grant details will be used. */
            grantOfferId: string;
            /** @description The identifier of the grant reference. */
            id: string;
            /** @description An object containing the details of the 30-day repayment threshold. */
            repayment?: components['schemas']['Repayment'];
            /**
             * @description The current status of the grant. Possible values: **Pending**, **Active**, **Repaid**.
             * @enum {string}
             */
            status: 'Pending' | 'Active' | 'Repaid';
        };
        CapitalGrantInfo: {
            /** @description An object containing the details of the receiving party of the grant. Setting either an `accountHolderId`, `balanceAccountId`, or both is required. */
            counterparty?: components['schemas']['Counterparty'];
            /** @description The identifier of the grant account used for the grant. */
            grantAccountId: string;
            /** @description The identifier of the grant offer that has been selected and from which the grant details will be used. */
            grantOfferId: string;
        };
        CapitalGrants: {
            /** @description The unique identifier of the grant. */
            grants: components['schemas']['CapitalGrant'][];
        };
        Counterparty: {
            /** @description The identifier of the receiving account holder. The payout will default to the primary balance account of this account holder if no `balanceAccountId` is provided. */
            accountHolderId?: string;
            /** @description The identifier of the balance account that belongs to the receiving account holder. */
            balanceAccountId?: string;
            /** @description The identifier of the transfer instrument that belongs to the legal entity of the account holder. */
            transferInstrumentId?: string;
        };
        CounterpartyInfoV3: {
            /** @description Unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id). */
            balanceAccountId?: string;
            /** @description Contains information about the bank account. */
            bankAccount?: components['schemas']['BankAccountV3'];
            /** @description Unique identifier of the [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id). */
            transferInstrumentId?: string;
        };
        CounterpartyV3: {
            /** @description Unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id). */
            balanceAccountId?: string;
            /** @description Contains information about the bank account. */
            bankAccount?: components['schemas']['BankAccountV3'];
            /** @description Contains information about the merchant. */
            merchant?: components['schemas']['MerchantData'];
            /** @description Unique identifier of the [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id). */
            transferInstrumentId?: string;
        };
        DKLocalAccountIdentification: {
            /** @description The 4-10 digits bank account number (Kontonummer) (without separators or whitespace). */
            accountNumber: string;
            /** @description The 4-digit bank code (Registreringsnummer) (without separators or whitespace). */
            bankCode: string;
            /**
             * @description **dkLocal**
             * @default dkLocal
             * @enum {string}
             */
            type: 'dkLocal';
        };
        Fee: {
            /** @description An object containing the fee amount. */
            amount: components['schemas']['Amount'];
        };
        HKLocalAccountIdentification: {
            /** @description The 9- to 15-character bank account number (alphanumeric), without separators or whitespace. Starts with the 3-digit branch code. */
            accountNumber: string;
            /** @description The 3-digit clearing code, without separators or whitespace. */
            clearingCode: string;
            /**
             * @description **hkLocal**
             * @default hkLocal
             * @enum {string}
             */
            type: 'hkLocal';
        };
        HULocalAccountIdentification: {
            /** @description The 24-digit bank account number, without separators or whitespace. */
            accountNumber: string;
            /**
             * @description **huLocal**
             * @default huLocal
             * @enum {string}
             */
            type: 'huLocal';
        };
        IbanAccountIdentification: {
            /** @description The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard. */
            iban: string;
            /**
             * @description **iban**
             * @default iban
             * @enum {string}
             */
            type: 'iban';
        };
        InvalidField: {
            /** @description Description of the validation error. */
            message: string;
            /** @description The field that has an invalid value. */
            name: string;
            /** @description The invalid value. */
            value: string;
        };
        JSONObject: Record<string, never>;
        Link: {
            href?: string;
        };
        Links: {
            /** @description Contains a link to the next page. */
            next?: components['schemas']['Link'];
            /** @description Contains a link to the previous page. */
            prev?: components['schemas']['Link'];
        };
        MerchantData: {
            /** @description The unique identifier of the merchant's acquirer. */
            acquirerId?: string;
            /** @description The merchant category code. */
            mcc?: string;
            /** @description The merchant identifier. */
            merchantId?: string;
            /** @description Contains the merchant's name and location. */
            nameLocation?: components['schemas']['NameLocation'];
            /** @description The merchant postal code. */
            postalCode?: string;
        };
        NOLocalAccountIdentification: {
            /** @description The 11-digit bank account number, without separators or whitespace. */
            accountNumber: string;
            /**
             * @description **noLocal**
             * @default noLocal
             * @enum {string}
             */
            type: 'noLocal';
        };
        NZLocalAccountIdentification: {
            /** @description The 15-16 digit bank account number. The first 2 digits are the bank number, the next 4 digits are the branch number, the next 7 digits are the account number, and the final 2-3 digits are the suffix. */
            accountNumber: string;
            /**
             * @description **nzLocal**
             * @default nzLocal
             * @enum {string}
             */
            type: 'nzLocal';
        };
        NameLocation: {
            /** @description The city where the merchant is located. */
            city?: string;
            /** @description The country where the merchant is located in [three-letter country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) format. */
            country?: string;
            /** @description The home country in [three-digit country code](https://en.wikipedia.org/wiki/ISO_3166-1_numeric) format, used for government-controlled merchants such as embassies. */
            countryOfOrigin?: string;
            /** @description The name of the merchant's shop or service. */
            name?: string;
            /** @description The raw data. */
            rawData?: string;
            /** @description The state where the merchant is located. */
            state?: string;
        };
        NumberAndBicAccountIdentification: {
            /** @description The bank account number, without separators or whitespace. The length and format depends on the bank or country. */
            accountNumber: string;
            /** @description Additional identification codes of the bank. Some banks may require these identifiers for cross-border transfers. */
            additionalBankIdentification?: components['schemas']['AdditionalBankIdentification'];
            /** @description The bank's 8- or 11-character BIC or SWIFT code. */
            bic: string;
            /**
             * @description **numberAndBic**
             * @default numberAndBic
             * @enum {string}
             */
            type: 'numberAndBic';
        };
        PLLocalAccountIdentification: {
            /** @description The 26-digit bank account number ([Numer rachunku](https://pl.wikipedia.org/wiki/Numer_Rachunku_Bankowego)), without separators or whitespace. */
            accountNumber: string;
            /**
             * @description **plLocal**
             * @default plLocal
             * @enum {string}
             */
            type: 'plLocal';
        };
        PartyIdentification: {
            /** @description Address of the bank account owner. */
            address?: components['schemas']['Address'];
            /**
             * Format: date
             * @description The date of birth of the individual in [ISO-8601](https://www.w3.org/TR/NOTE-datetime) format. For example, **YYYY-MM-DD**. Should not be before January 1, 1900.
             *
             * Allowed only when `type` is **individual**.
             */
            dateOfBirth?: string;
            /**
             * @description First name of the individual.
             *
             * Allowed only when `type` is **individual**.
             */
            firstName?: string;
            /** @description The name of the entity. */
            fullName: string;
            /**
             * @description Last name of the individual.
             *
             * Allowed only when `type` is **individual**.
             */
            lastName?: string;
            /** @description A unique reference to identify the party or counterparty involved in transfers. This identifier ensures consistency and uniqueness throughout all transactions initiated to and from the same party. For example, your client's unique wallet or payee ID. */
            reference?: string;
            /**
             * @description The type of entity that owns the bank account.
             *
             *  Possible values: **individual**, **organization**, or **unknown**.
             * @default unknown
             * @enum {string}
             */
            type?: 'individual' | 'organization' | 'unknown';
        };
        PaymentInstrument: {
            /** @description The description of the resource. */
            description?: string;
            /** @description The unique identifier of the resource. */
            id?: string;
            /** @description The reference for the resource. */
            reference?: string;
            /** @description The type of wallet the network token is associated with. */
            tokenType?: string;
        };
        Repayment: {
            /**
             * Format: int32
             * @description The repayment that is deducted daily from incoming net volume, in [basis points](https://www.investopedia.com/terms/b/basispoint.asp).
             */
            basisPoints: number;
            /** @description An object containing the details of the configuration for repayment term. */
            term?: components['schemas']['RepaymentTerm'];
            /** @description An object containing the details of the 30-day repayment threshold. */
            threshold?: components['schemas']['ThresholdRepayment'];
        };
        RepaymentTerm: {
            /**
             * Format: int32
             * @description The estimated term for repaying the grant, in days.
             */
            estimatedDays: number;
            /**
             * Format: int32
             * @description The maximum term for repaying the grant, in days. Only applies when `contractType` is **loan**.
             */
            maximumDays?: number;
        };
        ResourceReference: {
            /** @description The description of the resource. */
            description?: string;
            /** @description The unique identifier of the resource. */
            id?: string;
            /** @description The reference for the resource. */
            reference?: string;
        };
        RestServiceError: {
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail: string;
            /** @description A code that identifies the problem type. */
            errorCode: string;
            /** @description A unique URI that identifies the specific occurrence of the problem. */
            instance?: string;
            /** @description Detailed explanation of each validation error, when applicable. */
            invalidFields?: components['schemas']['InvalidField'][];
            /** @description A unique reference for the request, essentially the same as `pspReference`. */
            requestId?: string;
            /** @description JSON response payload. */
            response?: components['schemas']['JSONObject'];
            /**
             * Format: int32
             * @description The HTTP status code.
             */
            status: number;
            /** @description A short, human-readable summary of the problem type. */
            title: string;
            /** @description A URI that identifies the problem type, pointing to human-readable documentation on this problem type. */
            type: string;
        };
        ReturnTransferRequest: {
            /** @description Contains information about the amount to be returned. */
            amount: components['schemas']['Amount'];
            /**
             * @description Your internal reference for the return. If you don't provide this in the request, Adyen generates a unique reference. This reference is used in all communication with you about the instruction status.
             *
             * We recommend using a unique value per instruction.
             * If you need to provide multiple references for a transaction, separate them with hyphens ("-").
             */
            reference?: string;
        };
        ReturnTransferResponse: {
            /** @description The unique identifier of the return. */
            id?: string;
            /** @description Your internal reference for the return. */
            reference?: string;
            /**
             * @description The resulting status of the return.
             *
             * Possible values: **Authorised**, **Declined**.
             * @enum {string}
             */
            status?: 'Authorised' | 'Declined';
            /** @description The unique identifier of the original transfer. */
            transferId?: string;
        };
        SELocalAccountIdentification: {
            /** @description The 7- to 10-digit bank account number ([Bankkontonummer](https://sv.wikipedia.org/wiki/Bankkonto)), without the clearing number, separators, or whitespace. */
            accountNumber: string;
            /** @description The 4- to 5-digit clearing number ([Clearingnummer](https://sv.wikipedia.org/wiki/Clearingnummer)), without separators or whitespace. */
            clearingNumber: string;
            /**
             * @description **seLocal**
             * @default seLocal
             * @enum {string}
             */
            type: 'seLocal';
        };
        SGLocalAccountIdentification: {
            /** @description The 4- to 19-digit bank account number, without separators or whitespace. */
            accountNumber: string;
            /** @description The bank's 8- or 11-character BIC or SWIFT code. */
            bic: string;
            /**
             * @description **sgLocal**
             * @default sgLocal
             * @enum {string}
             */
            type?: 'sgLocal';
        };
        ServiceError: {
            /** @description The error code mapped to the error message. */
            errorCode?: string;
            /** @description The category of the error. */
            errorType?: string;
            /** @description A short explanation of the issue. */
            message?: string;
            /** @description The PSP reference of the payment. */
            pspReference?: string;
            /**
             * Format: int32
             * @description The HTTP response status.
             */
            status?: number;
        };
        ThresholdRepayment: {
            /** @description The amount to be repaid on a 30-day basis. */
            amount: components['schemas']['Amount'];
        };
        Transaction: {
            /** @description Unique identifier of the account holder. */
            accountHolderId: string;
            /** @description Contains information about the amount of the transaction. */
            amount: components['schemas']['Amount'];
            /** @description Unique identifier of the balance account. */
            balanceAccountId: string;
            /** @description The unique identifier of the balance platform. */
            balancePlatform: string;
            /**
             * Format: date-time
             * @description The date the transaction was booked into the balance account.
             */
            bookingDate: string;
            /**
             * @description The category of the transaction indicating the type of activity.
             *
             *  Possible values:
             *
             * * **platformPayment**: The transaction is a payment or payment modification made with an Adyen merchant account.
             *
             * * **internal**: The transaction resulted from an internal adjustment such as a deposit correction or invoice deduction.
             *
             * * **bank**: The transaction is a bank-related activity, such as sending a payout or receiving funds.
             *
             * * **issuedCard**: The transaction is a card-related activity, such as using an Adyen-issued card to pay online.
             *
             *
             * @enum {string}
             */
            category?: 'bank' | 'card' | 'grants' | 'internal' | 'issuedCard' | 'migration' | 'platformPayment' | 'upgrade';
            /** @description Contains information about the other party in the transaction. */
            counterparty: components['schemas']['CounterpartyV3'];
            /**
             * Format: date-time
             * @description The date the transaction was created.
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.
             */
            creationDate?: string;
            /** @description The `description` from the `/transfers` request. */
            description?: string;
            /**
             * @deprecated
             * @description The PSP reference of the transaction in the journal.
             */
            eventId?: string;
            /** @description The unique identifier of the transaction. */
            id: string;
            /** @description The amount that the sender instructed their bank to send. This can be higher than `amount.value` when their bank deducts costs for the transfer. */
            instructedAmount?: components['schemas']['Amount'];
            /** @description The unique identifier of the payment instrument that was used for the transaction. */
            paymentInstrumentId?: string;
            /** @description The [`reference`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_reference) from the `/transfers` request. If you haven't provided any, Adyen generates a unique reference. */
            reference: string;
            /**
             * @description The reference sent to or received from the counterparty.
             *
             * * For outgoing funds, this is the [`referenceForBeneficiary`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__resParam_referenceForBeneficiary) from the  [`/transfers`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_referenceForBeneficiary) request.
             *
             *  * For incoming funds, this is the reference from the sender.
             */
            referenceForBeneficiary?: string;
            /**
             * @description The status of the transaction.
             *
             *  Possible values:
             *
             * * **pending**: The transaction is still pending.
             *
             * * **booked**: The transaction has been booked to the balance account.
             *
             *
             * @enum {string}
             */
            status: 'booked' | 'pending';
            /** @description Unique identifier of the related transfer. */
            transferId?: string;
            /**
             * @description The type of the transaction.
             *
             *  Possible values: **payment**, **capture**, **captureReversal**, **refund** **refundReversal**, **chargeback**, **chargebackReversal**, **secondChargeback**, **atmWithdrawal**, **atmWithdrawalReversal**, **internalTransfer**, **manualCorrection**, **invoiceDeduction**, **depositCorrection**, **bankTransfer**, **miscCost**, **paymentCost**, **fee**
             * @enum {string}
             */
            type?:
                | 'atmWithdrawal'
                | 'atmWithdrawalReversal'
                | 'balanceAdjustment'
                | 'balanceMigration'
                | 'balanceRollover'
                | 'bankTransfer'
                | 'capture'
                | 'captureReversal'
                | 'cardTransfer'
                | 'cashOutFee'
                | 'cashOutFunding'
                | 'cashOutInstruction'
                | 'chargeback'
                | 'chargebackCorrection'
                | 'chargebackReversal'
                | 'chargebackReversalCorrection'
                | 'depositCorrection'
                | 'fee'
                | 'grant'
                | 'installment'
                | 'installmentReversal'
                | 'internalTransfer'
                | 'invoiceDeduction'
                | 'leftover'
                | 'manualCorrection'
                | 'miscCost'
                | 'payment'
                | 'paymentCost'
                | 'refund'
                | 'refundReversal'
                | 'repayment'
                | 'reserveAdjustment'
                | 'secondChargeback'
                | 'secondChargebackCorrection';
            /**
             * Format: date-time
             * @description The date the transfer amount becomes available in the balance account.
             */
            valueDate: string;
        };
        TransactionSearchResponse: {
            /** @description Contains links to the next and previous page whenever applicable. */
            _links?: components['schemas']['Links'];
            /** @description Contains the transactions that match the query parameters. */
            data?: components['schemas']['Transaction'][];
        };
        Transfer: {
            /** @description The account holder associated with the balance account used in the transfer. */
            accountHolder?: components['schemas']['ResourceReference'];
            /** @description The amount of the transfer. */
            amount: components['schemas']['Amount'];
            /** @description Contains information about the balance account involved in the transfer. */
            balanceAccount?: components['schemas']['ResourceReference'];
            /**
             * @deprecated
             * @description The unique identifier of the source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).
             */
            balanceAccountId?: string;
            /**
             * @description The category of transfer.
             *
             * Possible values:
             *
             *  - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.
             *
             * - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.
             *
             * - **issuedCard**: Transfer initiated by a Adyen-issued card.
             *
             * - **platformPayment**: Fund movements related to payments that are acquired for your users.
             * @enum {string}
             */
            category: 'bank' | 'internal' | 'issuedCard' | 'platformPayment';
            /** @description The other party in the transfer. */
            counterparty: components['schemas']['CounterpartyV3'];
            /**
             * Format: date-time
             * @description The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.
             */
            creationDate?: string;
            /**
             * @description Your description for the transfer. It is used by most banks as the transfer description. We recommend sending a maximum of 140 characters, otherwise the description may be truncated.
             *
             * Supported characters: **[a-z] [A-Z] [0-9] / - ?** **: ( ) . , ' + Space**
             *
             * Supported characters for **regular** and **fast** transfers to a US counterparty: **[a-z] [A-Z] [0-9] & $ % # @** **~ = + - _ ' " ! ?**
             */
            description?: string;
            /**
             * @description The direction of the transfer.
             *
             * Possible values: **incoming**, **outgoing**.
             * @enum {string}
             */
            direction?: 'incoming' | 'outgoing';
            /** @description The ID of the resource. */
            id?: string;
            /** @description Contains information about the payment instrument used in the transfer. */
            paymentInstrument?: components['schemas']['PaymentInstrument'];
            /**
             * @deprecated
             * @description The unique identifier of the [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) used in the transfer.
             */
            paymentInstrumentId?: string;
            /**
             * @description The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with `category` **bank**.
             *
             * Possible values:
             *
             * * **regular**: For normal, low-value transactions.
             *
             * * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.
             *
             * * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.
             *
             * * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).
             *
             * * **crossBorder**: High-value transfer to a recipient in a different country.
             *
             * * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN). This will be removed in v4 and replaced with a new field.
             * @enum {string}
             */
            priority?: 'crossBorder' | 'fast' | 'instant' | 'internal' | 'regular' | 'wire';
            /**
             * @description Additional information about the status of the transfer.
             * @enum {string}
             */
            reason?:
                | 'amountLimitExceeded'
                | 'approved'
                | 'balanceAccountTemporarilyBlockedByTransactionRule'
                | 'counterpartyAccountBlocked'
                | 'counterpartyAccountClosed'
                | 'counterpartyAccountNotFound'
                | 'counterpartyAddressRequired'
                | 'counterpartyBankTimedOut'
                | 'counterpartyBankUnavailable'
                | 'declinedByTransactionRule'
                | 'error'
                | 'notEnoughBalance'
                | 'refusedByCounterpartyBank'
                | 'routeNotFound'
                | 'scaFailed'
                | 'unknown';
            /** @description Your reference for the transfer, used internally within your platform. If you don't provide this in the request, Adyen generates a unique reference. */
            reference?: string;
            /**
             * @description  A reference that is sent to the recipient. This reference is also sent in all webhooks related to the transfer, so you can use it to track statuses for both the source and recipient of funds.
             *
             *  Supported characters: **a-z**, **A-Z**, **0-9**. The maximum length depends on the `category`.
             *
             * - **internal**: 80 characters
             *
             * - **bank**: 35 characters when transferring to an IBAN, 15 characters for others.
             */
            referenceForBeneficiary?: string;
            /**
             * @description The result of the transfer.
             *
             *  For example, **authorised**, **refused**, or **error**.
             * @enum {string}
             */
            status:
                | 'approvalPending'
                | 'atmWithdrawal'
                | 'atmWithdrawalReversalPending'
                | 'atmWithdrawalReversed'
                | 'authAdjustmentAuthorised'
                | 'authAdjustmentError'
                | 'authAdjustmentRefused'
                | 'authorised'
                | 'bankTransfer'
                | 'bankTransferPending'
                | 'booked'
                | 'bookingPending'
                | 'cancelled'
                | 'capturePending'
                | 'captureReversalPending'
                | 'captureReversed'
                | 'captured'
                | 'capturedExternally'
                | 'chargeback'
                | 'chargebackExternally'
                | 'chargebackPending'
                | 'chargebackReversalPending'
                | 'chargebackReversed'
                | 'credited'
                | 'depositCorrection'
                | 'depositCorrectionPending'
                | 'dispute'
                | 'disputeClosed'
                | 'disputeExpired'
                | 'disputeNeedsReview'
                | 'error'
                | 'expired'
                | 'failed'
                | 'fee'
                | 'feePending'
                | 'internalTransfer'
                | 'internalTransferPending'
                | 'invoiceDeduction'
                | 'invoiceDeductionPending'
                | 'manualCorrectionPending'
                | 'manuallyCorrected'
                | 'matchedStatement'
                | 'matchedStatementPending'
                | 'merchantPayin'
                | 'merchantPayinPending'
                | 'merchantPayinReversed'
                | 'merchantPayinReversedPending'
                | 'miscCost'
                | 'miscCostPending'
                | 'paymentCost'
                | 'paymentCostPending'
                | 'received'
                | 'refundPending'
                | 'refundReversalPending'
                | 'refundReversed'
                | 'refunded'
                | 'refundedExternally'
                | 'refused'
                | 'reserveAdjustment'
                | 'reserveAdjustmentPending'
                | 'returned'
                | 'secondChargeback'
                | 'secondChargebackPending'
                | 'undefined';
        };
        TransferInfo: {
            /** @description The amount of the transfer. */
            amount: components['schemas']['Amount'];
            /** @description The unique identifier of the source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id). */
            balanceAccountId?: string;
            /**
             * @description The type of transfer.
             *
             * Possible values:
             *
             *  - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.
             *
             * - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.
             *
             * - **issuedCard**: Transfer initiated by a Adyen-issued card.
             *
             * - **platformPayment**: Fund movements related to payments that are acquired for your users.
             * @enum {string}
             */
            category: 'bank' | 'internal' | 'issuedCard' | 'platformPayment' | 'card';
            /** @description The recipient of the funds transfer. A bank account, a balance account, or a transfer instrument is required. */
            counterparty: components['schemas']['CounterpartyInfoV3'];
            /**
             * @description Your description for the transfer. It is used by most banks as the transfer description. We recommend sending a maximum of 140 characters, otherwise the description may be truncated.
             *
             * Supported characters: **[a-z] [A-Z] [0-9] / - ?** **: ( ) . , ' + Space**
             *
             * Supported characters for **regular** and **fast** transfers to a US counterparty: **[a-z] [A-Z] [0-9] & $ % # @** **~ = + - _ ' " ! ?**
             */
            description?: string;
            /** @description The unique identifier of the source [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstruments__resParam_id). */
            paymentInstrumentId?: string;
            /**
             * @description The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with `category` **bank**.
             *
             * Possible values:
             *
             * * **regular**: For normal, low-value transactions.
             *
             * * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.
             *
             * * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.
             *
             * * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).
             *
             * * **crossBorder**: High-value transfer to a recipient in a different country.
             *
             * * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN).
             * @enum {string}
             */
            priority?: 'crossBorder' | 'fast' | 'instant' | 'internal' | 'regular' | 'wire';
            /** @description Your reference for the transfer, used internally within your platform. If you don't provide this in the request, Adyen generates a unique reference. */
            reference?: string;
            /**
             * @description  A reference that is sent to the recipient. This reference is also sent in all webhooks related to the transfer, so you can use it to track statuses for both the source and recipient of funds.
             *
             *  Supported characters: **a-z**, **A-Z**, **0-9**. The maximum length depends on the `category`.
             *
             * - **internal**: 80 characters
             *
             * - **bank**: 35 characters when transferring to an IBAN, 15 characters for others.
             */
            referenceForBeneficiary?: string;
            /** @description The ultimate sender of the funds of the transfer (ultimate debtor). */
            ultimateParty?: components['schemas']['UltimatePartyIdentification'];
        };
        UKLocalAccountIdentification: {
            /** @description The 8-digit bank account number, without separators or whitespace. */
            accountNumber: string;
            /** @description The 6-digit [sort code](https://en.wikipedia.org/wiki/Sort_code), without separators or whitespace. */
            sortCode: string;
            /**
             * @description **ukLocal**
             * @default ukLocal
             * @enum {string}
             */
            type: 'ukLocal';
        };
        USLocalAccountIdentification: {
            /** @description The bank account number, without separators or whitespace. */
            accountNumber: string;
            /**
             * @description The bank account type.
             *
             * Possible values: **checking** or **savings**. Defaults to **checking**.
             * @default checking
             * @enum {string}
             */
            accountType?: 'checking' | 'savings';
            /** @description The 9-digit [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or whitespace. */
            routingNumber: string;
            /**
             * @description **usLocal**
             * @default usLocal
             * @enum {string}
             */
            type: 'usLocal';
        };
        UltimatePartyIdentification: {
            /** @description Address of the bank account owner. */
            address?: components['schemas']['Address'];
            /**
             * Format: date
             * @description The date of birth of the individual in [ISO-8601](https://www.w3.org/TR/NOTE-datetime) format. For example, **YYYY-MM-DD**. Should not be before January 1, 1900.
             *
             * Allowed only when `type` is **individual**.
             */
            dateOfBirth?: string;
            /**
             * @description First name of the individual.
             *
             * Allowed only when `type` is **individual**.
             */
            firstName?: string;
            /** @description The name of the entity. */
            fullName: string;
            /**
             * @description Last name of the individual.
             *
             * Allowed only when `type` is **individual**.
             */
            lastName?: string;
            /** @description A unique reference to identify the party or counterparty involved in transfers. This identifier ensures consistency and uniqueness throughout all transactions initiated to and from the same party. For example, your client's unique wallet or payee ID. */
            reference?: string;
            /**
             * @description The type of entity that owns the bank account.
             *
             *  Possible values: **individual**, **organization**, or **unknown**.
             * @default unknown
             * @enum {string}
             */
            type?: 'individual' | 'organization' | 'unknown';
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: {
        /** @description Base64-encoded blob of data. You will need auth-param1 when authenticating your user using the SDK. */
        'auth-param1': string;
    };
    pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
    /**
     * Get a capital account
     * @description Returns a list of grants with status and outstanding balances.
     */
    'get-grants': {
        parameters: {
            query?: {
                /** @description The counterparty account holder id. */
                counterpartyAccountHolderId?: string;
            };
        };
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                content: {
                    'application/json': components['schemas']['CapitalGrants'];
                };
            };
            /** @description Bad Request - a problem reading or understanding the request. */
            400: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
            /** @description Unauthorized - authentication required. */
            401: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
            /** @description Forbidden - insufficient permissions to process the request. */
            403: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
            /** @description Not Found - the payment was not found */
            404: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
            /** @description Unprocessable Entity - a request validation error. */
            422: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
            /** @description Internal Server Error - the server could not process the request. */
            500: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
        };
    };
    /**
     * Request a grant payout
     * @description Requests the payout of the selected grant offer.
     */
    'post-grants': {
        requestBody?: {
            content: {
                'application/json': components['schemas']['CapitalGrantInfo'];
            };
        };
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                content: {
                    'application/json': components['schemas']['CapitalGrant'];
                };
            };
            /** @description Bad Request - a problem reading or understanding the request. */
            400: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
            /** @description Unauthorized - authentication required. */
            401: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
            /** @description Forbidden - insufficient permissions to process the request. */
            403: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
            /** @description Not Found - the payment was not found */
            404: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
            /** @description Unprocessable Entity - a request validation error. */
            422: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
            /** @description Internal Server Error - the server could not process the request. */
            500: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
        };
    };
    /**
     * Get grant reference details
     * @description Returns the details of a capital account specified in the path.
     */
    'get-grants-id': {
        parameters: {
            path: {
                /** @description The unique identifier of the grant. */
                id: string;
            };
        };
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                content: {
                    'application/json': components['schemas']['CapitalGrant'];
                };
            };
            /** @description Bad Request - a problem reading or understanding the request. */
            400: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
            /** @description Unauthorized - authentication required. */
            401: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
            /** @description Forbidden - insufficient permissions to process the request. */
            403: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
            /** @description Not Found - the payment was not found */
            404: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
            /** @description Unprocessable Entity - a request validation error. */
            422: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
            /** @description Internal Server Error - the server could not process the request. */
            500: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
        };
    };
    /**
     * Get all transactions
     * @description >Versions 1 and 2 of the Transfers API are deprecated. If you are just starting your implementation, use the latest version.
     *
     * Returns all the transactions related to a balance account, account holder, or balance platform.
     *
     * When making this request, you must include at least one of the following:
     * - `balanceAccountId`
     * - `accountHolderId`
     * - `balancePlatform`.
     *
     * This endpoint supports cursor-based pagination. The response returns the first page of results, and returns links to the next and previous pages when applicable. You can use the links to page through the results.
     */
    'get-transactions': {
        parameters: {
            query: {
                /**
                 * @description The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id).
                 *
                 * Required if you don't provide a `balanceAccountId` or `accountHolderId`.
                 */
                balancePlatform?: string;
                /**
                 * @description The unique identifier of the [payment instrument](https://docs.adyen.com/api-explorer/balanceplatform/latest/get/paymentInstruments/_id_).
                 *
                 * To use this parameter, you must also provide a `balanceAccountId`, `accountHolderId`, or `balancePlatform`.
                 *
                 * The `paymentInstrumentId` must be related to the `balanceAccountId` or `accountHolderId` that you provide.
                 */
                paymentInstrumentId?: string;
                /**
                 * @description The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/accountHolders/{id}__queryParam_id).
                 *
                 * Required if you don't provide a `balanceAccountId` or `balancePlatform`.
                 *
                 * If you provide a `balanceAccountId`, the `accountHolderId` must be related to the `balanceAccountId`.
                 */
                accountHolderId?: string;
                /**
                 * @description The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balanceAccounts/{id}__queryParam_id).
                 *
                 * Required if you don't provide an `accountHolderId` or `balancePlatform`.
                 *
                 * If you provide an `accountHolderId`, the `balanceAccountId` must be related to the `accountHolderId`.
                 */
                balanceAccountId?: string;
                /** @description The `cursor` returned in the links of the previous response. */
                cursor?: string;
                /** @description Only include transactions that have been created on or after this point in time. The value must be in ISO 8601 format. For example, **2021-05-30T15:07:40Z**. */
                createdSince: string;
                /** @description Only include transactions that have been created on or before this point in time. The value must be in ISO 8601 format. For example, **2021-05-30T15:07:40Z**. */
                createdUntil: string;
                /** @description The number of items returned per page, maximum of 100 items. By default, the response returns 10 items per page. */
                limit?: number;
            };
        };
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                content: {
                    'application/json': components['schemas']['TransactionSearchResponse'];
                };
            };
            /** @description Unauthorized - authentication required. */
            401: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
            /** @description Forbidden - insufficient permissions to process the request. */
            403: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
            /** @description Unprocessable Entity - a request validation error. */
            422: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
            /** @description Internal Server Error - the server could not process the request. */
            500: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
        };
    };
    /**
     * Get a transaction
     * @description >Versions 1 and 2 of the Transfers API are deprecated. If you are just starting your implementation, use the latest version.
     *
     * Returns a transaction.
     */
    'get-transactions-id': {
        parameters: {
            path: {
                /** @description The unique identifier of the transaction. */
                id: string;
            };
        };
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                content: {
                    'application/json': components['schemas']['Transaction'];
                };
            };
            /** @description Unauthorized - authentication required. */
            401: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
            /** @description Forbidden - insufficient permissions to process the request. */
            403: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
            /** @description Unprocessable Entity - a request validation error. */
            422: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
            /** @description Internal Server Error - the server could not process the request. */
            500: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
        };
    };
    /**
     * Transfer funds
     * @description >Versions 1 and 2 of the Transfers API are deprecated. If you are just starting your implementation, use the latest version.
     *
     * Starts a request to transfer funds to [balance accounts](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts), [transfer instruments](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments), or third-party bank accounts. Adyen sends the outcome of the transfer request through webhooks.
     *
     * To use this endpoint, you need an additional role for your API credential and transfers must be enabled for the source balance account. Your Adyen contact will set these up for you.
     */
    'post-transfers': {
        parameters: {
            header?: {
                /**
                 * @description Header for authenticating through SCA
                 * @example SCA realm="Transfer" auth-param1="eyJjaGFsbGVuZ2UiOiJiVlV6ZW5wek0waFNl..."
                 */
                'WWW-Authenticate'?: string;
            };
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['TransferInfo'];
            };
        };
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                content: {
                    'application/json': components['schemas']['Transfer'];
                };
            };
            /** @description Accepted - the request has been accepted for processing, but the processing has not been completed. */
            202: {
                content: {
                    'application/json': components['schemas']['Transfer'];
                };
            };
            /** @description Unauthorized - authentication required. */
            401: {
                headers: {
                    'auth-param1': components['headers']['auth-param1'];
                };
                content: {
                    'application/json': components['schemas']['ServiceError'];
                };
            };
            /** @description Forbidden - insufficient permissions to process the request. */
            403: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
            /** @description Unprocessable Entity - a request validation error. */
            422: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
            /** @description Internal Server Error - the server could not process the request. */
            500: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
        };
    };
    /**
     * Return a transfer
     * @description Returns previously transferred funds without creating a new `transferId`.
     */
    'post-transfers-transferId-returns': {
        parameters: {
            path: {
                /** @description The unique identifier of the transfer to be returned. */
                transferId: string;
            };
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['ReturnTransferRequest'];
            };
        };
        responses: {
            /** @description OK - the request has succeeded. */
            200: {
                content: {
                    'application/json': components['schemas']['ReturnTransferResponse'];
                };
            };
            /** @description Unauthorized - authentication required. */
            401: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
            /** @description Forbidden - insufficient permissions to process the request. */
            403: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
            /** @description Unprocessable Entity - a request validation error. */
            422: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
            /** @description Internal Server Error - the server could not process the request. */
            500: {
                content: {
                    'application/json': components['schemas']['RestServiceError'];
                };
            };
        };
    };
}
